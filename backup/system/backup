//模块依赖和底层配置
const compression = require("compression"); //用于gzip压缩
const express = require("express"); //轻巧的express框架
const app = require("express")();
app.use(compression()); //对express所有路由启用gzip
app.use(express.static("static")); //静态文件引入
app.use(express.json()); //解析post
app.use(express.urlencoded({ extended: false })); //解析post
const multer = require("multer"); //用于文件上传
const upload = multer({ dest: "static/uploads/" }); //用户上传目录
const cookie = require("cookie");
const http = require("http").Server(app);
const io = require("socket.io")(http);
const request = require("request");
const sqlite3 = require("sqlite3").verbose();
const db = new sqlite3.Database("db.db"); //数据库位置，默认与index.js同目录
const colors = require("colors");
const fs = require("fs");
const path = require("path");
const jieba = require("nodejieba"); //中文分词器
jieba.load({
dict: path.join(`${process.cwd()}`, "config", "jieba.dict.utf8"),
hmmDict: path.join(`${process.cwd()}`, "config", "hmm_model.utf8"),
userDict: path.join(`${process.cwd()}`, "config", "userDict.txt"), //加载自定义分词库
idfDict: path.join(`${process.cwd()}`, "config", "idf.utf8"),
stopWordDict: path.join(`${process.cwd()}`, "config", "stopWordDict.txt"), //加载分词库黑名单
});
const yaml = require("yaml"); //使用yaml解析配置文件
const AipSpeech = require("baidu-aip-sdk").speech; //百度语音sdk
const crypto = require("crypto"); //编码库，用于sha1生成文件名
const voiceplayer = require("play-sound")(({ player: `${process.cwd()}/plugins/cmdmp3win.exe` })); //mp3静默播放工具，用于直播时播放语音
const { createCanvas, loadImage } = require("canvas"); //用于绘制文字图像，迫害p图
const { resolve } = require("path");
const os = require("os"); //用于获取系统工作状态
const { exit } = require("process");
require.all = require("require.all"); //插件加载器
const alphabet = require("alphabetjs");

//正则
const rename_reg = new RegExp("^/rename [\u4e00-\u9fa5a-z0-9]{1,10}$"); //允许1-10长度的数英汉昵称
const bv2av_reg = new RegExp("^[a-zA-Z0-9]{10,12}$"); //匹配bv号
const isImage_reg = new RegExp("\\[CQ:image,file="); //匹配qqBot图片
const change_reply_probability_reg = new RegExp("^/admin_change_reply_probability [0-9]*"); //匹配修改qqBot小夜回复率
const change_fudu_probability_reg = new RegExp("^/admin_change_fudu_probability [0-9]*"); //匹配修改qqBot小夜复读率
const img_url_reg = new RegExp("https(.*term=)"); //匹配图片地址
const isVideo_reg = new RegExp("^\\[CQ:video,file="); //匹配qqBot图片
const video_url_reg = new RegExp("http(.*term=unknow)"); //匹配视频地址
const yap_reg = new RegExp("^/吠.*"); //匹配请求语音
const come_yap_reg = new RegExp("^/嘴臭(.*)"); //匹配对话语音
const teach_reg = new RegExp("^问：(.*)答：(.*)"); //匹配教学指令
const prpr_reg = new RegExp("^/prpr (.*)"); //匹配prpr
const pohai_reg = new RegExp("^/迫害 (.*)"); //匹配迫害p图
const teach_balabala_reg = new RegExp("^/说不出话 (.*)"); //匹配balabala教学
const hand_grenade_reg = new RegExp("^一个手雷(.*)"); //匹配一个手雷
const mine_reg = new RegExp("^埋地雷"); //匹配埋地雷
const fuck_mine_reg = new RegExp("^踩地雷"); //匹配踩地雷
const hope_flower_reg = new RegExp("^希望的花(.*)"); //匹配希望的花
const loop_bomb_reg = new RegExp("^击鼓传雷(.*)"); //匹配击鼓传雷
const is_qq_reg = new RegExp("^[1-9][0-9]{4,9}$"); //校验是否是合法的qq号
const has_qq_reg = new RegExp("\\[CQ:at,qq=(.*)\\]"); //匹配是否有@
const admin_reg = new RegExp("/admin (.*)"); //匹配管理员指令
const setu_reg = new RegExp(".*图.*来.*|.*来.*图.*|.*[色涩瑟].*图.*"); //匹配色图来指令
const i_have_a_friend_reg = new RegExp("我有一个朋友说.*|我有个朋友说.*"); //匹配我有个朋友指令
const open_ju = new RegExp("张菊.*"); //匹配张菊指令
const close_ju = new RegExp("闭菊.*"); //匹配闭菊指令
const feed_back = new RegExp("^/报错.*"); //匹配报错指令
const ascii_draw = new RegExp("/字符画.*"); //匹配字符画指令
const gugua = new RegExp("^/孤寡.*"); //匹配孤寡指令
const cp_story = new RegExp("^/cp.*|^cp.*"); //匹配cp文指令
const fake_forward = new RegExp("^/强制迫害.*"); //匹配伪造转发指令
const approve_group_invite = new RegExp("^/批准 (.*)"); //匹配批准加群指令
const make_qrcode = new RegExp("^qr (.*)"); //匹配生成二维码指令
const come_some = new RegExp("^来点(.*)"); //匹配来点xx指令
const bww_reg = new RegExp("^/黑白图 (.*)"); //匹配黑白图

//声明TTS调用接口
let SpeechClient;